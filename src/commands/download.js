const ytdl = require("@distube/ytdl-core");
const fs = require("fs");
const path = require("path");
const { formatFileSize, sanitizeFileName } = require("../helpers/main");
const CHANNEL_USERNAME = "@secrets_shopping";
async function downloadVideo(videoUrl, chatId, bot, userId) {
  try {
    ensureDownloadDirectory();
    const chatMember = await bot.getChatMember(CHANNEL_USERNAME, userId);
    if (
      !(
        chatMember.status === "member" ||
        chatMember.status === "administrator" ||
        chatMember.status === "creator"
      )
    ) {
      bot.sendMessage(
        chatId,
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞: ${CHANNEL_USERNAME}`
      );
      return;
    }
    if (!videoUrl || !isValidYoutubeUrl(videoUrl)) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL YouTube
      bot.sendMessage(
        chatId,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –≤–∏–¥–µ–æ YouTube."
      );
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const processingMessage = await bot.sendMessage(
      chatId,
      "üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ..."
    );

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    const videoInfo = await ytdl.getInfo(videoUrl);
    const videoTitle = videoInfo.videoDetails.title;
    const sanitizedTitle = sanitizeFileName(videoTitle);
    const formats = videoInfo.formats.filter((format) => format.hasVideo);

    if (formats.length === 0) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞");
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ
    const selectedFormat = formats.sort(
      (a, b) => parseInt(b.bitrate) - parseInt(a.bitrate)
    )[0];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ
    await bot.editMessageText(
      `üé• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${videoTitle}\n`,
      {
        chat_id: chatId,
        message_id: processingMessage.message_id,
      }
    );

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    const filePath = path.join(
      __dirname,
      "../downloads",
      `${sanitizedTitle}.mp4`
    ); //
    const videoStream = ytdl(videoUrl, { format: selectedFormat });
    const fileStream = fs.createWriteStream(filePath);

    videoStream.pipe(fileStream);

    fileStream.on("finish", async () => {
      try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        await bot.sendVideo(chatId, filePath, {
          caption: `üìπ ${videoTitle}\nüíæ –†–∞–∑–º–µ—Ä: ${formatFileSize(
            fs.statSync(filePath).size
          )}\n`,
        });
        await bot
          .deleteMessage(chatId, processingMessage.message_id)
          .catch(() => {});
      } catch (err) {
        console.error(err.message);
        await bot.sendMessage(
          chatId,
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ." + err.message
        );
      } finally {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        fs.unlinkSync(filePath);
      }
    });

    fileStream.on("error", async (error) => {
      console.error("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ñ–∞–π–ª–∞:", error.message);
      await bot.sendMessage(
        chatId,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error.message);
    await bot.sendMessage(
      chatId,
      error.message ||
        "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

function isValidYoutubeUrl(url) {
  const ytdl = require("@distube/ytdl-core");
  return ytdl.validateURL(url);
}
function ensureDownloadDirectory() {
  const downloadDir = path.join(__dirname, "../downloads"); // Adjust the path as necessary
  if (!fs.existsSync(downloadDir)) {
    fs.mkdirSync(downloadDir);
  }
}
module.exports = { downloadVideo };
